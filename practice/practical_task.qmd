---
title: "Computer Support Practical Tasks"
date: "10/14/2024"
format:
  html:
    embed-resources: true
editor: source
---

## Introduction

For performing practical tasks **R** and **R Studio** have to be installed.

Links for downloading programs: 

1. R: <https://cran.r-project.org/>

2. R Studio: <https://posit.co/download/rstudio-desktop/>

The results of laboratory work must be placed in your repository on Github in the files `TaskX.qmd` (or `LabX.Rmd` if you prefer to use R markdown) and generated from it `TaskX.html`, where X is the number of the laboratory in the form: **question**, **code**, **result** (if necessary). So, the file structure could looks like:

```
--ComputerSupportSTU
  |--Task1.qmd
  |--Task1.html
  |--Task2.qmd
  |--Task2.html
```
Use a template for `qmd` document (file `template.qmd`) to generate correct html file

Example of output:

1.  Print rownames of dataset `mtcars`.

```{r}
row.names(mtcars)
```

## Task 0

1.  Create Github accout
2.  Create new repository "ComputerSupportSTU"
3.  In readme.md file add title a short repository description

## Task 1. Data Types

1. Create variables with all atomic types. Atomic types: `character`, `numeric`, `integer`, `complex`, `logical`.

2. Create the next vectors:
  * sequence from 5 to 75;
  * numbers: 3.14, 2.71, 0, 13;
  * with 100 `TRUE` values.

3. Create the next matrix:

|  |   |  |
|:---:|:-----:|:---:|
| 12  | 34    | 87  |
| -12 | -12.1 | 0   |
| 3.6 | 0.5   | 1.3 |

4. Create a `list` with all atomic types.

5. Create a `factor` with 3 levels: `infant`, `child`, `adult`.

6. Create a `data frame`

7. Change column names of the `data frame`.


## Task 2. Subsetting data. Working with NA

1. Create the next random vector:

```{r message=FALSE}
v <- rnorm(50)
```

For the vector print:

- 10th item,
- items from 10th to 20th (including 20th item),
- 10 items starting from 5th,
- all items bigger than 0,
- last 5 items.

2. Create the next data frame:

```{r message=FALSE}
df <- 
  data.frame(a = rnorm(50), b = 1:50, 
             cc = sample(letters, 50, replace = TRUE))

```

For the data frame find and print:

- the last 10 rows,
- 15th item of columns `cc`,
- subset columns `a` and `b` and rows from 10th to 20th (including 20th),
- a new vector from column `b`.

3. Create the next random vector:

```{r}
v_na <- rnorm(30)
num_na <- sample(10, 1)
v_na[sample(30, num_na)] <- NA
```

For this vector:

- print all not NA items,
- find how many NA values the vector has,
- find `min` `max` and `mean` for the vector.

## Task 3. Exploring a dataset

For this task you have to use dataset from file `airquality.csv`. The description of the data you can find by the [link](https://www.rdocumentation.org/packages/datasets/versions/3.6.2/topics/airquality).

Example, how to work with the dataset. For instanse, we want to find month (column `Month`) with highest mean temperature (`Temp`)

```{r message=FALSE}
library(dplyr)

airquality |> 
  group_by(Month) |> 
  summarise(mean_temp = mean(Temp)) |> 
  filter(mean_temp == max(mean_temp))
```

You task is to answer the following questions about this data by writing appropriate code.

1. What are the column names of the data frame?

2. What are the row names of the data frame?

3. Extract the first 6 rows of the data frame and print them to the console

4. How many observations (i.e. rows) are in this data frame?

5. Extract the last 6 rows of the data frame and print them to the console

6. How many missing values are in the "Ozone" column of this data frame?

7. What is the mean of the "Ozone" column in this dataset? Exclude missing values (coded as NA) from this calculation.

8. Extract the subset of rows of the data frame where Ozone values are above 31 and Temp values are above 90.

## Task 4. Functions

For this task you have to use dataset [Airbnb Prices in European Cities](https://www.kaggle.com/datasets/thedevastator/airbnb-prices-in-european-cities) from Kaggle. The dataset consists of 20 csv files. You can find the dataset in the folder `/data/airbnb/`.

This dataset provides a comprehensive look at Airbnb prices in some of the most popular European cities. Each listing is evaluated for various attributes such as room types, cleanliness and satisfaction ratings, bedrooms, distance from the city centre, and more to capture an in-depth understanding of Airbnb prices on both weekdays and weekends.

You task is to write the following function:

1. **`explore_city(file_path)`**
  
  This function takes as an argument path to a one csv file and returns the data frame with the next columns:
  
  - `city_name`,
  - `day_type` with 2 options: `weekdays` or `weekends`,
  - `n_rows` with number of rows in the file,
  - `min_price` with min from `realSum`,
  - `avg_price` with average from `realSum`,
  - `max_price` with max from `realSum`,
  - `avg_satisfaction` with average from `guest_satisfaction_overall`.

2. **`prepare_dataset(folder_path)`**
  
  This function should:
  
  - Read all the CSV files from the dataset.
  - Add two new columns:
      - `city`: containing the name of the city.
      - `day_type`: indicating whether the price corresponds to `weekdays` or `weekends`.
  - Merge all the data into a single dataset.
  - Save the merged dataset as a CSV file named `airbnb.csv`.

3. **`compare_means(city1, city2)`**
  
  This function calculates statistical difference between means of prices (`realSum`) between two cities. Use the function `t.test(x, y)` from base R, where `x = city1$realSum` and `y = city2$realSum`. For data use merged data frame `airbnb.csv` from `prepare_dataset()` function.

>**Hint:** For extracting **city name** and **day type** from the file name you can use the next function:

```{r message=FALSE}
library(stringr)
library(dplyr)

extract_name_day_type <- function(file_path) {
    file_path |> 
        basename() |>
        tools::file_path_sans_ext() |> 
        str_split_1("_")
}

# example
extract_name_day_type("./data/airbnb/amsterdam_weekdays.csv")
```

## Task 5: Visualization

Using the dataset from **Task 4.2** (`airbnb.csv`), create **four visualizations** using both the **base plotting system** and **ggplot2**. You may use arbitrary subsets of the data for this task. Ensure that all visualizations include:  
- A title,  
- Annotated axes,  
- A legend (if needed).  

### Instructions:  
1. **Histogram**:  
   Create a histogram using the `hist` function from the **base plotting system**.  

2. **Scatter Plot**:  
   Create a scatter plot using **ggplot2** with the `geom_point` geometry. Incorporate a third variable by using different colors to represent it.  

3. **Boxplot**:  
   Create a boxplot using **ggplot2** with the `geom_boxplot` geometry.  

4. **Custom Plot**:  
   Create an additional plot of your choice using either the **base plotting system** or **ggplot2**.  

